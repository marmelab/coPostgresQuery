'use strict';

var merge = require('../utils/merge');
var valueSubQuery = require('./valueSubQuery');

module.exports = function (client, tableName, fields, idFieldName, idAutoGenerated, version, raw) {
    var getValueSubQuery = valueSubQuery(fields, idAutoGenerated, idFieldName);

    return function* batchInsert(entities) {
        if (!entities) {
            throw new Error('No data for batch inserting ' + tableName + ' entities.');
        }

        if (entities.length === 0) {
            return [];
        }

        var values = [];
        var parameters = {};

        var columns = raw ? fields : fields.filter(function (field) {
            return (!idAutoGenerated && field !== idFieldName) && typeof entities[0][field] !== 'undefined';
        });
        entities.forEach(function (entity, index) {
            var value = getValueSubQuery(entity, index + 1, null, raw);
            parameters = merge(parameters, value.parameters);
            values.push('(' + value.query + ')');
        });

        var query = 'INSERT INTO ' + tableName + '(' + columns.join(', ') + ') VALUES ' + values.join(', ') + ' RETURNING ' + fields.join(', ');
        var savedEntities = (yield client.query_(query, parameters)).rows;

        if (version) {
            let historyPromises = savedEntities.map(function (entity) {
                return version(entity, 'insert', true);
            });

            yield historyPromises;
        }

        return savedEntities;
    };
};

'use strict';

var merge = require('../utils/merge');
var valueSubQuery = require('./valueSubQuery');

export default function (tableName, fields, idFieldName, idAutoGenerated, version, raw) {
    var getValueSubQuery = valueSubQuery(fields, idAutoGenerated, idFieldName);

    return function (client) {
        return function* batchInsert(entities) {
            if (!entities) {
                throw new Error('No data for batch inserting ' + tableName + ' entities.');
            }

            if (entities.length === 0) {
                return [];
            }

            let values = [];
            let parameters = {};

            const columns = raw ? fields : fields.filter(function (field) {
                return (!idAutoGenerated && field !== idFieldName) && typeof entities[0][field] !== 'undefined';
            });
            entities.forEach(function (entity, index) {
                const value = getValueSubQuery(entity, index + 1, null, raw);
                parameters = merge(parameters, value.parameters);
                values.push('(' + value.query + ')');
            });

            const query = `INSERT INTO ${tableName}(${columns.join(', ')}) VALUES ${values.join(', ')} RETURNING ${fields.join(', ')}`;
            const savedEntities = yield client.query(query, parameters);

            if (version) {
                const historyPromises = savedEntities.map(function (entity) {
                    return version(entity, 'insert', true);
                });

                yield historyPromises;
            }

            return savedEntities;
        };
    };
};

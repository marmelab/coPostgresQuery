'use strict';

// @TODO refactor version to other base queries and hasChanges directly.

module.exports = function (client, table, historyTable, fields, idFieldName, idAutoGenerated) {

    var updateLastVersion = function* updateLastVersion(entity) {
        var setQuery = [];
        var parameters = {};
        parameters[idFieldName] = entity.id;
        fields.forEach(function (field) {
            if (idAutoGenerated && field === 'id') return;
            if (typeof entity[field] === 'undefined') return;
            setQuery.push(field + '=$' + field);
            if (Array.isArray(entity[field])) {
                parameters[field] = JSON.stringify(entity[field]);
            } else {
                parameters[field] = entity[field];
            }
        });
        setQuery.push('versioned_at=$versionedAt');
        parameters.versionedAt = new Date();

        if (parameters.length === 1) {
            throw new Error('no valid column to set');
        }

        var query = 'UPDATE ' + historyTable + ' SET ' + setQuery.join(', ') +
         ' WHERE version_id IN (SELECT version_id FROM ' + historyTable + ' WHERE id = $id ORDER BY version_id DESC LIMIT 1) ';
        yield client.query(query, parameters);
    };

    var getColumnNames = function* getColumnNames() {
        var columnNamesQuery = 'SELECT column_name FROM information_schema.columns WHERE table_name = $tableName';

        return (yield client.query({sql: columnNamesQuery, parameters: {
            tableName: table
        }})).map(function (row) {
            return row.column_name;
        });
    };

    return function* version(entity, trigger, newVersion) {

        entity.version_trigger = trigger;

        if (['insert', 'update', 'delete'].indexOf(trigger) === -1) {
            throw new Error('Unknown trigger status: ' + trigger);
        }

        var columnNames = yield getColumnNames();

        if (!newVersion) {
            yield updateLastVersion(entity);
        } else {
            var numVersion = (yield client.query({
                sql: 'SELECT COUNT(version_id) FROM ' + historyTable + ' WHERE id=$id GROUP BY id',
                parameters: {
                    id: entity.id
                }
            }))[0];
            numVersion = numVersion ? numVersion.count : 0;
            numVersion++;
            var subSelect =
              'SELECT ' + columnNames.join(', ') +
                ', \'' + trigger + '\'' +
                ', \'' + numVersion + '\'' +
              ' FROM ' + table +
              ' WHERE id = $id';

            var query = 'INSERT INTO ' + historyTable + ' (' + columnNames.join(', ') + ', version_trigger, version) (' + subSelect + ') ';
            yield client.query(query, {
                id: entity.id
            });
        }
    };
};
